@using cce106_palit.Entity
@{
    ViewData["Title"] = "My Shopping Cart";
}

@model List<Cart>

<div class="mt-38 w-full max-w-5xl mx-auto">
    <h1 class="text-2xl font-bold mb-4 dark:text-white">@ViewData["Title"]</h1>

    @if (Model.Any())
    {
        <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow overflow-x-auto">
            <div class="grid grid-cols-[3fr_1fr_1fr_1fr_1fr] font-semibold text-xs sm:text-sm">
                <div class="text-gray-600 dark:text-white">Product</div>
                <div class="text-center text-gray-600 dark:text-white">Unit Price</div>
                <div class="text-center text-gray-600 dark:text-white">Quantity</div>
                <div class="text-center text-gray-600 dark:text-white">Total Price</div>
                <div class="text-end text-gray-600 dark:text-white">Actions</div>
            </div>
        </div>

        <div class="w-full max-w-5xl bg-white dark:bg-gray-800 mx-auto p-4 rounded-lg shadow mt-3 overflow-x-auto">
            @foreach (var item in Model)
            {
                <div class="grid grid-cols-[3fr_1fr_1fr_1fr_1fr] items-center py-4 border-b border-gray-200 dark:border-gray-700 min-w-[600px]" id="product-row-@item.Product_Id">
                    <div class="flex items-center">
                        <input type="checkbox" class="mr-2 product-checkbox" @if (item.Is_Checked)
                        {
                            <text>checked</text>
                        } data-product-id="@item.Product_Id" data-price="@item.Product.Price" />
                        <img src="~/@item.Product.Image_url" class="w-16 h-16 object-cover rounded" />
                        <span class="ml-2 dark:text-white">@item.Product.Name</span>
                    </div>

                    <div class="text-center dark:text-white">₱@item.Product.Price</div>

                    <div class="flex justify-center items-center border border-gray-300 dark:border-gray-600 rounded-md text-sm w-24 mx-auto">
                        <button type="button" class="px-2 py-1 border-r border-gray-300 dark:border-gray-600 dark:text-white decrease-btn" data-product-id="@item.Product_Id">-</button>
                        <input id="quantityInput-@item.Product_Id" class="w-10 text-center mx-1 text-sm py-1 bg-white dark:bg-gray-800 text-black dark:text-white" type="number" value="@item.Quantity" min="1" />
                        <button type="button" class="px-2 py-1 border-l border-gray-300 dark:border-gray-600 dark:text-white increase-btn" data-product-id="@item.Product_Id">+</button>
                    </div>

                    <div class="text-center font-semibold dark:text-white total-price">₱@(item.Product.Price * item.Quantity)</div>

                    <div class="text-end">
                        <form asp-action="Remove" method="post" class="inline" onsubmit="event.preventDefault(); deleteProduct(@item.Product_Id);">
                            <button type="submit" class="text-red-500 hover:text-red-700 group cursor-pointer" title="Delete">
                                <i class="ri-delete-bin-line text-lg group-hover:hidden"></i>
                                <i class="ri-delete-bin-fill text-lg hidden group-hover:inline"></i>
                            </button>
                        </form>
                    </div>
                </div>
            }

            <div class="flex justify-between items-center bg-white dark:bg-gray-800 mt-5 py-3 px-2 dark:border-gray-700 overflow-x-auto min-w-[600px]">
                <div class="flex items-center dark:text-white">
                    <input type="checkbox" id="selectAll" class="mr-2">
                    <label for="selectAll">Select All</label>
                    <button id="deleteSelectedButton" class="ml-4 bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600">Delete</button>
                </div>
                <div class="text-right dark:text-white">
                    <span>Total (<span id="checked-item-count">@Model.Count(c => c.Is_Checked)</span> items): </span>
                    <span id="total-amount" class="text-lg font-bold text-blue-500">₱@Model.Where(c => c.Is_Checked).Sum(item => item.Product.Price * item.Quantity)</span>
                    <a class="ml-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600" id="checkoutButton" asp-controller="Shop" asp-action="CheckOut">Check Out</a>
                </div>
            </div> 

        </div>
    }
    else
    {
        <div class="text-center">
            <img src="~/images/empty-cart.png" alt="Empty" class="w-64 max-w-full mx-auto mb-6" />
            <p class="mt-2 text-gray-600 dark:text-gray-300">Your cart is empty.</p>
            <a class="text-[var(--color-primary)] hover:underline font-semibold" asp-controller="Home" asp-action="Shop">Start shopping now!</a>
        </div>
    }
</div>

<script>
    function calculateTotal() {
        let totalAmount = 0;
        let checkedCount = 0;

        document.querySelectorAll('.product-checkbox:checked').forEach(function (checkbox) {
            let productId = checkbox.getAttribute('data-product-id');
            let price = parseFloat(checkbox.getAttribute('data-price'));
            let quantity = parseInt(document.getElementById('quantityInput-' + productId).value);
            totalAmount += price * quantity;
            checkedCount++;
        });
        document.getElementById('total-amount').textContent = '₱' + totalAmount.toFixed(2);
        document.getElementById('checked-item-count').textContent = checkedCount;

        const checkoutButton = document.getElementById('checkoutButton');
        if (checkedCount === 0) {
            checkoutButton.classList.add('disabled');
        } else {
            checkoutButton.classList.remove('disabled');
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        calculateTotal();
    });

    document.getElementById('checkoutButton').addEventListener('click', function (event) {
        if (this.classList.contains('disabled')) {
            event.preventDefault();
        }
    });

    document.querySelectorAll('.product-checkbox').forEach(function (checkbox) {
        checkbox.addEventListener('change', function () {
            calculateTotal();
            let productId = this.getAttribute('data-product-id');
            let isChecked = this.checked;
            updateCheckedStatus(productId, isChecked);
        });
    });

    document.getElementById('selectAll').addEventListener('change', function () {
        let isChecked = this.checked;
        document.querySelectorAll('.product-checkbox').forEach(function (checkbox) {
            checkbox.checked = isChecked;
            let productId = checkbox.getAttribute('data-product-id');
            updateCheckedStatus(productId, isChecked);
        });
        calculateTotal();
    });



    document.querySelectorAll('.decrease-btn').forEach(function (decreaseButton) {
        decreaseButton.addEventListener('click', function () {
            let productId = this.getAttribute('data-product-id');
            let input = document.getElementById('quantityInput-' + productId);
            let value = parseInt(input.value);
            if (value > parseInt(input.min)) {
                input.value = value - 1;
                updateQuantity(productId, input.value);
                calculateTotal();
            }
        });
    });

    document.querySelectorAll('.increase-btn').forEach(function (increaseButton) {
        increaseButton.addEventListener('click', function () {
            let productId = this.getAttribute('data-product-id');
            let input = document.getElementById('quantityInput-' + productId);
            let value = parseInt(input.value);
            input.value = value + 1;
            updateQuantity(productId, input.value);
            calculateTotal();
        });
    });

    // update quantity action
    function updateQuantity(productId, newQuantity) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("EditQuantity")',
            data: {
                productId: productId,
                newQuantity: newQuantity
            },
            success: function (response) {
                let totalPriceElement = document.querySelector(`#product-row-${productId} .total-price`);
                totalPriceElement.textContent = '₱' + response.newTotalPrice;
                calculateTotal();

                if (response.message) {
                    showToast(response.message, 'success');
                }
            },
            error: function (xhr, status, error) {
                showToast("Error updating quantity: " + error, 'error');
            }
        });
    }

    // delete product action
    function deleteProduct(productId) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("RemoveProduct")',
            data: {
                productId: productId
            },
            success: function (response) {
                document.getElementById(`product-row-${productId}`).remove();
                calculateTotal();

                if (response.message) {
                    showToast(response.message, 'success');
                } else {
                    showToast("Product removed!", 'success');
                }
            },
            error: function (xhr, status, error) {
                showToast("Error deleting product: " + error, 'error');
            }
        });
    }

    // update check status action
    function updateCheckedStatus(productId, isChecked) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateCheckedStatus")',
            data: {
                productId: productId,
                isChecked: isChecked
            },
            success: function (response) {
                if (response.message) {
                    showToast(response.message, 'success');
                }
            },
            error: function (xhr, status, error) {
                showToast("Error updating checked status: " + error, 'error');
            }
        });
    }

    document.querySelectorAll('input[id^="quantityInput-"]').forEach(function (input) {
        input.addEventListener('input', function () {
            let productId = this.id.replace('quantityInput-', '');
            let newQuantity = parseInt(this.value);

            // Basic validation
            if (isNaN(newQuantity) || newQuantity < 1) {
                this.value = 1;
                newQuantity = 1;
            }

            updateQuantity(productId, newQuantity);
            calculateTotal();
        });
    });

    document.getElementById('deleteSelectedButton').addEventListener('click', function () {
        let selectedIds = [];
        document.querySelectorAll('.product-checkbox:checked').forEach(function (checkbox) {
            selectedIds.push(checkbox.getAttribute('data-product-id'));

        });

        if (selectedIds.length === 0) {
            showToast("No item(s) selected for deletion.", 'error');
            return;
        }
        // remove selected items
        if (confirm("Are you sure you want to delete the selected items?")) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("RemoveAll")',
                data: {
                    productIds: selectedIds
                },
                success: function (response) {
                    selectedIds.forEach(function (productId) {
                        document.getElementById(`product-row-${productId}`).remove();
                    });
                    calculateTotal();

                    if (response.message) {
                        showToast(response.message, 'success');
                        form.reset();
                    } else {
                        showToast(response.message, 'error');

                    }
                },
                error: function (xhr, status, error) {
                    alert("Error deleting selected products: " + error);
                }
            });
        }
    });


</script>
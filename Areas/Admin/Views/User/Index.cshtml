@model X.PagedList.IPagedList<User>
@using X.PagedList.Mvc.Core;
@using cce106_palit.Entity

@{
    ViewData["Title"] = "Users";
}
<div class="py-4 space-y-4 mt-16 sm:mt-8">
    <div class="space-y-4">
        <div class="bg-white dark:bg-gray-800 rounded shadow-sm">
            <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between">
                <div class="text-2xl font-bold">
                    @ViewData["Title"]
                </div>
                <button data-modal-target="addUser" class="cursor-pointer flex items-center bg-[var(--color-primary)] text-white text-sm px-4 py-2 rounded hover:bg-[var(--hover)] transition" title="Create new user">
                    <i class="ri-add-circle-line mr-2"></i>
                    <span class="hidden sm:block">Add new user</span>
                </button>
            </div>

            <div class="grid gap-4 sm:table w-full text-sm text-left text-gray-800 dark:text-gray-100">
                <div class="hidden sm:table-header-group bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
                    <div class="table-row">
                        <div class="table-cell px-4 py-2 font-semibold">ID</div>
                        <div class="table-cell px-4 py-2 font-semibold">Username</div>
                        <div class="table-cell px-4 py-2 font-semibold">Name</div>
                        <div class="table-cell px-4 py-2 font-semibold">Email</div>
                        <div class="table-cell px-4 py-2 font-semibold">Role</div>
                        <div class="table-cell px-4 py-2 font-semibold">Actions</div>
                    </div>
                </div>

                @foreach (var user in Model)
                {
                    <div class="grid sm:table-row border border-gray-200 dark:border-gray-700 rounded-lg sm:rounded-none sm:border-0">
                        <div class="sm:table-cell px-4 py-2">
                            <span class="sm:hidden font-semibold">ID:</span> @user.Id
                        </div>
                        <div class="sm:table-cell px-4 py-2">
                            <span class="sm:hidden font-semibold">Username:</span> @user.Username
                        </div>
                        <div class="sm:table-cell px-4 py-2">
                            <span class="sm:hidden font-semibold">Name:</span> @user.Name
                        </div>
                        <div class="sm:table-cell px-4 py-2">
                            <span class="sm:hidden font-semibold">Email:</span> @user.Email
                        </div>
                        <div class="sm:table-cell px-4 py-2">
                            <span class="sm:hidden font-semibold">Role:</span> @user.Role
                        </div>
                        <div class="sm:table-cell px-4 py-2 text-right">
                            <div class="relative inline-block text-left">
                                <button type="button"
                                        onclick="toggleDropdown('actions-dropdown-@user.Id')"
                                        class="cursor-pointer inline-flex items-center justify-center w-8 h-8 rounded-full text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none"
                                         viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                                         class="w-5 h-5">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                              d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z" />
                                    </svg>
                                </button>

                                <div id="actions-dropdown-@user.Id"
                                     class="hidden absolute right-0 mt-2 w-40 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg z-50 transition-all duration-200">
                                    <button type="button"
                                            class="cursor-pointer w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-blue-50 hover:text-blue-600 dark:hover:bg-gray-700"
                                            data-modal-target="editUser-@user.Id">
                                        <i class="ri-edit-line mr-2"></i> Edit
                                    </button>

                                    <form id="delete-user-form-@user.Id" asp-action="Delete" asp-controller="User" method="post" class="w-full">
                                        <input type="hidden" name="id" value="@user.Id" />
                                        <button type="button" id="delete-user-btn-@user.Id"
                                                class="cursor-pointer w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-red-50 hover:text-red-600 dark:hover:bg-gray-700">
                                            <i class="ri-delete-bin-line mr-2"></i> Delete
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>


            <div class="py-4 flex justify-center sm:justify-center overflow-x-auto">
                @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), new PagedListRenderOptions
               {
                   LiElementClasses = new[] { "mx-1" },
                   PageClasses = new[] {
                    "block min-w-[36px] text-center px-3 py-1 rounded border border-gray-300 hover:bg-[var(--hover)] hover:text-white dark:border-gray-600 dark:hover:bg-gray-600"
                    },
                   UlElementClasses = new[] {
                    "flex flex-wrap justify-center gap-2 sm:gap-1"
                    },
                   ActiveLiElementClass = "bg-[var(--color-primary)] hover:bg-[var(--hover)] text-white rounded cursor-pointer"
               })
            </div>

        </div>
    </div>
</div>
@{
    @await Html.PartialAsync("~/Areas/Admin/Views/User/Create.cshtml");
    // ;
    // @await Html.PartialAsync("~/Areas/Admin/Views/Products/Edit.cshtml")
    // ;
}

<script>
    function toggleDropdown(dropdownId) {
        const dropdown = document.getElementById(dropdownId);
        dropdown.classList.toggle('hidden');
    }

    document.addEventListener('click', function(event) {
        if (!event.target.matches('[onclick^="toggleDropdown"]')) {
            const dropdowns = document.querySelectorAll('[id^="actions-dropdown-"]');
            dropdowns.forEach(dropdown => {
                if (!dropdown.classList.contains('hidden')) {
                    dropdown.classList.add('hidden');
                }
            });
        }
    });

        document.querySelectorAll('[id^="delete-user-btn-"]').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const id = this.id.replace('delete-user-btn-', '');

            openModal({
                title: 'Delete User',
                message: 'This will permanently delete the user and all associated data. This action cannot be undone.',
                confirmText: 'Yes, delete it',
                onConfirm: () => {
                    document.getElementById('delete-user-form-' + id).submit();
                },
                showCancel: true
            });
        });
    });
</script>